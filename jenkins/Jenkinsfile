pipeline {
    agent any

    parameters {
        string(name:'DB_HOST', defaultValue: 'dbMysql', description: 'db host')
        string(name:'Db_PASSWORD', defaultValue: 'db1234!', description: 'db password')
        string(name:'DB_NAME', defaultValue: 'dbName', description: 'db name')
        string(name:'DB_USER', defaultValue: 'user1234!', description: 'db user')
        string(name:'db_port', defaultValue: '3360', description: 'db port')
        string(name:'SECRET_KEY', defaultValue: 'secret_key', description: 'drf secret key')
        string(name:'GOOGLE_OAUTH2_CLIENT_ID', defaultValue: 'client id', description: 'google social login client id')
        string(name:'GOOGLE_OAUTH2_CLIENT_SECRET', defaultValue: 'client secret', description: 'google social login client secret')
    }
    stages {
        stage('Start Deploy') {
            agent any
            when {
                branch 'master'
            }
            steps {
                slackSend (channel: 'deploych', color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
        }

        stage('Start Test'){
            agent any
            when {
                branch 'test'
            }
            steps {
                slackSend (channel: 'testch', color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
        }

        stage('virtual env'){
            steps {
                script {
                    try{
                        sh 'venv\\scripts\\activate'
                    }catch(){
                        sh 'python3 -m venv venv'
                    }
                }
            }
        }

        stage('install requirements'){
            steps{
                sh 'pip install -r requirements.txt'
            }
            post {
                failure {
                    slackSend (channel: 'deploych', color: '#FF0040', message: "install requirements failed - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                    slackSend (channel: 'testch', color: '#FF0040', message: "install requirements failed - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
        }

        stage('Check parameter test'){
            when {
                branch 'test'
            }
            steps {
                script {
                    withAWS(region: 'ap-northeast-2', credentials: 'JenkinsUser'){
                        def secret_key = sh(script: "aws ssm get-parameters --name SECRET_KEY | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def state = sh(script: "aws ssm get-parameters --name STATE | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def django_settings_module = sh(script: "aws ssm get-parameters --name /test/DJANGO_SETTINGS_MODULE | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def google_oauth2_client_id = sh(script: "aws ssm get-parameters --name GOOGLE_OAUTH2_CLIENT_ID | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def google_oauth2_client_secret = sh(script: "aws ssm get-parameters --name GOOGLE_OAUTH2_CLIENT_SECRET | jq '.Parameters[0].Value'", returnStdout: true).trim()
                    }
                }
            }
            post {
                success {
                    slackSend (channel: 'testch', color: '#00FF20', message: "Check parameter test job ended successfully - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
                failure {
                    slackSend (channel: 'testch', color: '#FF0040', message: "Check parameter test job failed - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
        }

        stage('Check parameter prod') {
            when {
                branch 'master'
            }
            steps {
                script {
                    withAWS(region: 'ap-northeast-2', credentials: 'JenkinsUser'){
                        def db_name = sh(script: "aws ssm get-parameters --name DB_NAME | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def db_user = sh(script: "aws ssm get-parameters --name DB_USER | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def db_password = sh(script: "aws ssm get-parameters --name DB_PASSWORD | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def db_host = sh(script: "aws ssm get-parameters --name DB_HOST | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def db_port = sh(script: "aws ssm get-parameters --name DB_PORT | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def secret_key = sh(script: "aws ssm get-parameters --name SECRET_KEY | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def state = sh(script: "aws ssm get-parameters --name STATE | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def django_settings_module = sh(script: "aws ssm get-parameters --name /prod/DJANGO_SETTINGS_MODULE | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def google_oauth2_client_id = sh(script: "aws ssm get-parameters --name GOOGLE_OAUTH2_CLIENT_ID | jq '.Parameters[0].Value'", returnStdout: true).trim()
                        def google_oauth2_client_secret = sh(script: "aws ssm get-parameters --name GOOGLE_OAUTH2_CLIENT_SECRET | jq '.Parameters[0].Value'", returnStdout: true).trim()
                    }
                }
            }
            post {
                success {
                    slackSend (channel: 'deploych', color: '#00FF20', message: "Check parameter prdo job ended successfully - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
                failure {
                    slackSend (channel: 'deploych', color: '#FF0040', message: "Check parameter prdo job failed - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
        }

        stage('Migration') {
            steps {
                sh 'python3 projectAN/manage.py makemigrations AN likeAN priceInfo socialUser'
                sh 'python3 projectAN/manage.py migrate'
            }
        }

        stage('Test API') {
            steps {
                sh 'coverage run projectAN/manage.py test AN likeAN socialUser'
            }
        }

        stage('Run server') {
            when {
                branch 'master'
            }
            steps {
                sh 'python3 projectAN/manage.py runserver 0.0.0.0:8000'   
            }
        }
    }
}